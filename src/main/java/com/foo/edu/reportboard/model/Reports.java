package com.foo.edu.reportboard.model;
// Generated 2018/02/11 6:29:27 by Hibernate Tools 4.3.5.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Reports generated by hbm2java
 */
@Entity
@Table(name = "reports")
@NamedQueries ({
	@NamedQuery(name="Reports.findAll",              query="SELECT r FROM Reports r ORDER BY r.reportId ASC"),
	@NamedQuery(name="Reports.findById",             query="SELECT r FROM Reports r WHERE r.reportId = :reportId"),
	@NamedQuery(name="Reports.findByCreated",        query="SELECT r FROM Reports r WHERE r.usersByCreatedUserId.userId = :createdUserId ORDER BY r.createdWhen DESC"),
	@NamedQuery(name="Reports.findByUpdated",        query="SELECT r FROM Reports r WHERE r.usersByUpdatedUserId.userId = :updatedUserId")
})
public class Reports implements java.io.Serializable {
	private static final long serialVersionUID = 654902557777594722L;
	private int reportId;
	private Users usersByCreatedUserId;
	private Users usersByUpdatedUserId;
	private String report;
	private Date createdWhen;
	private Date updatedWhen;
	private Set<Comments> comments = new HashSet<Comments>(0);
	private Set<ReportImages> reportImages = new HashSet<ReportImages>(0);

	public Reports() {
	}

	public Reports(int reportId, Users usersByCreatedUserId, Users usersByUpdatedUserId, String report,
			Date createdWhen, Date updatedWhen) {
		this.reportId = reportId;
		this.usersByCreatedUserId = usersByCreatedUserId;
		this.usersByUpdatedUserId = usersByUpdatedUserId;
		this.report = report;
		this.createdWhen = createdWhen;
		this.updatedWhen = updatedWhen;
	}

	public Reports(int reportId, Users usersByCreatedUserId, Users usersByUpdatedUserId, String report,
			Date createdWhen, Date updatedWhen, Set<Comments> commentses, Set<ReportImages> reportImageses) {
		this.reportId = reportId;
		this.usersByCreatedUserId = usersByCreatedUserId;
		this.usersByUpdatedUserId = usersByUpdatedUserId;
		this.report = report;
		this.createdWhen = createdWhen;
		this.updatedWhen = updatedWhen;
		this.comments = commentses;
		this.reportImages = reportImageses;
	}

	@Id

	@Column(name = "report_id", unique = true, nullable = false)
	public int getReportId() {
		return this.reportId;
	}

	public void setReportId(int reportId) {
		this.reportId = reportId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "created_user_id", nullable = false)
	public Users getUsersByCreatedUserId() {
		return this.usersByCreatedUserId;
	}

	public void setUsersByCreatedUserId(Users usersByCreatedUserId) {
		this.usersByCreatedUserId = usersByCreatedUserId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "updated_user_id", nullable = false)
	public Users getUsersByUpdatedUserId() {
		return this.usersByUpdatedUserId;
	}

	public void setUsersByUpdatedUserId(Users usersByUpdatedUserId) {
		this.usersByUpdatedUserId = usersByUpdatedUserId;
	}

	@Column(name = "report", nullable = false)
	public String getReport() {
		return this.report;
	}

	public void setReport(String report) {
		this.report = report;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_when", nullable = false, length = 29)
	public Date getCreatedWhen() {
		return this.createdWhen;
	}

	public void setCreatedWhen(Date createdWhen) {
		this.createdWhen = createdWhen;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updated_when", nullable = false, length = 29)
	public Date getUpdatedWhen() {
		return this.updatedWhen;
	}

	public void setUpdatedWhen(Date updatedWhen) {
		this.updatedWhen = updatedWhen;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "reports")
	public Set<Comments> getComments() {
		return this.comments;
	}

	public void setComments(Set<Comments> comments) {
		this.comments = comments;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "reports")
	public Set<ReportImages> getReportImages() {
		return this.reportImages;
	}

	public void setReportImageses(Set<ReportImages> reportImages) {
		this.reportImages = reportImages;
	}

}
