package com.foo.edu.reportboard.model;
// Generated 2018/02/11 6:29:27 by Hibernate Tools 4.3.5.Final

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Users generated by hbm2java
 */
@Entity
@Table(name = "users")
@NamedQueries ({
	@NamedQuery(name="Users.findAll",              query="SELECT u FROM Users u ORDER BY u.userId ASC"),
	@NamedQuery(name="Users.findById",             query="SELECT u FROM Users u WHERE u.userId = :userId"),
	@NamedQuery(name="Users.findByName",           query="SELECT u FROM Users u WHERE u.name = :name"),
	@NamedQuery(name="Users.findByMailAddress",    query="SELECT u FROM Users u WHERE u.mailAddress = :mailAddress"),
	@NamedQuery(name="Users.findEducationStaff",   query="SELECT u FROM Users u WHERE u.staffFlag = 1 ORDER BY u.userId ASC"),
	@NamedQuery(name="Users.findAllCandidates",    query="SELECT u FROM Users u WHERE u.staffFlag = 0 ORDER BY u.userId ASC")
})
public class Users implements java.io.Serializable {
	private static final long serialVersionUID = -9070572476511559526L;
	private int userId;
	private String mailAddress;
	private String password;
	private String name;
	private int staffFlag;
	private int deleteFlag;
	private Set<Reports> reportsesForCreatedUserId = new HashSet<Reports>(0);
	private Set<Comments> commentses = new HashSet<Comments>(0);
	private Set<Reports> reportsesForUpdatedUserId = new HashSet<Reports>(0);

	public Users() {
	}

	public Users(int userId, String mailAddress, String password, String name, int staffFlag,
			int deleteFlag) {
		this.userId = userId;
		this.mailAddress = mailAddress;
		this.password = password;
		this.name = name;
		this.staffFlag = staffFlag;
		this.deleteFlag = deleteFlag;
	}

	public Users(int userId, String mailAddress, String password, String name, int staffFlag,
			int deleteFlag, Set<Reports> reportsesForCreatedUserId, Set<Comments> commentses,
			Set<Reports> reportsesForUpdatedUserId) {
		this.userId = userId;
		this.mailAddress = mailAddress;
		this.password = password;
		this.name = name;
		this.staffFlag = staffFlag;
		this.deleteFlag = deleteFlag;
		this.reportsesForCreatedUserId = reportsesForCreatedUserId;
		this.commentses = commentses;
		this.reportsesForUpdatedUserId = reportsesForUpdatedUserId;
	}

	@Id

	@Column(name = "user_id", unique = true, nullable = false)
	public int getUserId() {
		return this.userId;
	}

	public void setUserId(int userId) {
		this.userId = userId;
	}

	@Column(name = "mail_address", nullable = false)
	public String getMailAddress() {
		return this.mailAddress;
	}

	public void setMailAddress(String mailAddress) {
		this.mailAddress = mailAddress;
	}

	@Column(name = "password", nullable = false)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "name", nullable = false)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "staff_flag", nullable = false)
	public int getStaffFlag() {
		return this.staffFlag;
	}

	public void setStaffFlag(int staffFlag) {
		this.staffFlag = staffFlag;
	}

	@Column(name = "delete_flag", nullable = false)
	public int getDeleteFlag() {
		return this.deleteFlag;
	}

	public void setDeleteFlag(int deleteFlag) {
		this.deleteFlag = deleteFlag;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByCreatedUserId")
	public Set<Reports> getReportsesForCreatedUserId() {
		return this.reportsesForCreatedUserId;
	}

	public void setReportsesForCreatedUserId(Set<Reports> reportsesForCreatedUserId) {
		this.reportsesForCreatedUserId = reportsesForCreatedUserId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<Comments> getCommentses() {
		return this.commentses;
	}

	public void setCommentses(Set<Comments> commentses) {
		this.commentses = commentses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByUpdatedUserId")
	public Set<Reports> getReportsesForUpdatedUserId() {
		return this.reportsesForUpdatedUserId;
	}

	public void setReportsesForUpdatedUserId(Set<Reports> reportsesForUpdatedUserId) {
		this.reportsesForUpdatedUserId = reportsesForUpdatedUserId;
	}

}
